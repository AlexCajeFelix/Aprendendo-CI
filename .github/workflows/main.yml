name: Main CI/CD Pipeline

on:
  push:
    branches:
      - main
      - master
    paths:
      - 'src/**'
      - 'pom.xml'
      - 'Dockerfile'
      - '.github/workflows/**'
  pull_request:
    branches:
      - main
      - master
  workflow_dispatch:
    inputs:
      skip-tests:
        description: 'Skip tests'
        required: false
        type: boolean
        default: false
      skip-docker:
        description: 'Skip Docker build'
        required: false
        type: boolean
        default: false

permissions:
  contents: read
  security-events: write
  actions: read

env:
  JAVA_VERSION: '21'
  MAVEN_OPTS: '-Xmx3072m'

jobs:
  # ============================================
  # JOB 1: Build & Test (Chama workflow reutilizável)
  # ============================================
  build-and-test:
    name: 🏗️ Build & Test
    uses: ./.github/workflows/java-reusable.yml
    with:
      java-version: '21'
      maven-args: 'clean install'
      skip-tests: ${{ github.event.inputs.skip-tests == 'true' }}
      upload-artifacts: true
  
  # ============================================
  # JOB 2: SonarCloud Quality Analysis
  # ============================================
  sonar-analysis:
    name: 📊 SonarCloud Analysis
    runs-on: ubuntu-latest
    needs: [build-and-test]
    if: always() && needs.build-and-test.result == 'success'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better analysis
      
      - name: ☕ Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'
      
      - name: 📊 Run SonarCloud Scan
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          echo "🔍 Running SonarCloud analysis..."
          mvn clean verify sonar:sonar \
            -Dsonar.projectKey=AlexCajeFelix_Aprendendo-CI \
            -Dsonar.organization=alexcajefelix \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.token=${{ secrets.SONAR_TOKEN }}
      
      - name: ✅ Quality Gate Check
        run: |
          echo "✅ SonarCloud analysis completed"
          echo "📊 View results: https://sonarcloud.io/dashboard?id=AlexCajeFelix_Aprendendo-CI"
  
  # ============================================
  # JOB 3: Security Scan
  # ============================================
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: [build-and-test]
    if: always() && needs.build-and-test.result == 'success'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 🔍 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
      
      - name: 📤 Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: 📋 Security Summary
        run: |
          echo "✅ Security scan completed"
          echo "🔒 View results in: Security → Code scanning alerts"
  
  # ============================================
  # JOB 4: Docker Build
  # ============================================
  docker-build:
    name: 🐳 Docker Build
    runs-on: ubuntu-latest
    needs: [build-and-test, sonar-analysis, security-scan]
    if: |
      always() && 
      needs.build-and-test.result == 'success' &&
      github.event.inputs.skip-docker != 'true'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 📦 Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: application-jar-${{ github.sha }}
          path: target/
      
      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: 🏗️ Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: |
            aprendendo-ci:${{ github.sha }}
            aprendendo-ci:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: ✅ Docker build successful
        run: |
          echo "✅ Docker image built successfully"
          echo "🏷️  Tags: latest, ${{ github.sha }}"
  
  # ============================================
  # JOB 5: Docker Push (Somente em main/master)
  # ============================================
  docker-push:
    name: 🚀 Docker Push
    runs-on: ubuntu-latest
    needs: [build-and-test, docker-build]
    if: |
      always() &&
      needs.docker-build.result == 'success' &&
      (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') &&
      github.event_name == 'push'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 📦 Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: application-jar-${{ github.sha }}
          path: target/
      
      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: 🔐 Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 📝 Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.actor }}/aprendendo-ci
          tags: |
            type=raw,value=latest
            type=sha,prefix=main-
            type=raw,value=1.0.0
      
      - name: 🚀 Build and Push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: ✅ Deployment successful
        run: |
          echo "✅ Docker image pushed to GitHub Container Registry"
          echo "🐳 Repository: ghcr.io/${{ github.actor }}/aprendendo-ci"
          echo "🏷️  Tags: latest, ${{ github.sha }}, 1.0.0"
          echo "📦 View at: https://github.com/${{ github.actor }}/pkgs/container/aprendendo-ci"
  
  # ============================================
  # JOB 6: Pipeline Summary
  # ============================================
  summary:
    name: 📋 Pipeline Summary
    runs-on: ubuntu-latest
    needs: [build-and-test, sonar-analysis, security-scan, docker-build, docker-push]
    if: always()
    
    steps:
      - name: 📊 Generate Pipeline Summary
        run: |
          cat >> $GITHUB_STEP_SUMMARY <<EOF
          # 🚀 CI/CD Pipeline Summary
          
          ## Pipeline Results
          
          | Stage | Status | Details |
          |-------|--------|---------|
          | 🏗️ Build & Test | ${{ needs.build-and-test.result }} | Java ${{ env.JAVA_VERSION }}, Maven |
          | 📊 SonarCloud | ${{ needs.sonar-analysis.result }} | Code quality analysis |
          | 🔒 Security Scan | ${{ needs.security-scan.result }} | Trivy vulnerability scan |
          | 🐳 Docker Build | ${{ needs.docker-build.result }} | Container image |
          | 🚀 Docker Push | ${{ needs.docker-push.result }} | GitHub Container Registry |
          
          ## Build Information
          
          | Item | Value |
          |------|-------|
          | **Trigger** | ${{ github.event_name }} |
          | **Branch** | ${{ github.ref_name }} |
          | **Commit** | ${{ github.sha }} |
          | **Actor** | ${{ github.actor }} |
          | **Artifact** | application-jar-${{ github.sha }} |
          
          ## Configuration Status
          
          | Service | Status | Action |
          |---------|--------|--------|
          | **GitHub Container Registry** | ✅ Always Available | Uses GITHUB_TOKEN automatically |
          | **SonarCloud** | ${{ secrets.SONAR_TOKEN != '' && '✅ Configured' || '❌ Not configured' }} | ${{ secrets.SONAR_TOKEN == '' && 'Add SONAR_TOKEN secret' || 'Ready for analysis' }} |
          
          ## Quick Links
          
          - 🔒 [Security Alerts](https://github.com/${{ github.repository }}/security/code-scanning)
          - 📋 [Setup Instructions](./SETUP-SECRETS.md)
          - 🐳 [GitHub Container Registry](https://github.com/${{ github.actor }}/pkgs/container/aprendendo-ci)
          ${{ secrets.SONAR_TOKEN != '' && '- 📊 [SonarCloud Dashboard](https://sonarcloud.io/dashboard?id=AlexCajeFelix_Aprendendo-CI)' || '' }}
          
          ---
          ⏱️ Pipeline completed at: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          EOF
      
      - name: 🎉 Pipeline Status
        run: |
          if [[ "${{ needs.build-and-test.result }}" == "success" ]]; then
            echo "✅ Pipeline completed successfully!"
          else
            echo "❌ Pipeline failed. Check logs above."
            exit 1
          fi

